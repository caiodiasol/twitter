name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat-render ]
  pull_request:
    branches: [ main, develop, feat-render ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: twitter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: backend/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('backend/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction --no-ansi

    - name: Run migrations
      run: |
        cd backend
        poetry run python manage.py makemigrations --check
        poetry run python manage.py migrate
      env:
        POSTGRES_DB: twitter_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: false

    - name: Run tests with coverage
      run: |
        cd backend
        poetry run coverage run --source='.' manage.py test
        poetry run coverage report
        poetry run coverage xml
      env:
        POSTGRES_DB: twitter_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Job 2: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run tests
      run: |
        cd frontend
        npm run test:ci
      env:
        CI: true

    - name: Build application
      run: |
        cd frontend
        CI=false npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install security tools
      run: |
        cd backend
        poetry add --group dev bandit safety
        poetry install --no-interaction --no-ansi

    - name: Run Bandit security scan
      run: |
        cd backend
        poetry run bandit -r . -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        cd backend
        poetry run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Job 4: Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install Python dependencies
      run: |
        cd backend
        poetry add --group dev black flake8 isort
        poetry install --no-interaction --no-ansi

    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Black (Python formatter)
      run: |
        cd backend
        poetry run black --check .

    - name: Run Flake8 (Python linter)
      run: |
        cd backend
        poetry run flake8 .

    - name: Run isort (Python import sorter)
      run: |
        cd backend
        poetry run isort --check-only .

    - name: Run Prettier (Frontend formatter)
      run: |
        cd frontend
        npx prettier --check src/

  # Job 5: Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, code-quality]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üöÄ Ready for deployment!"

    - name: Notify Failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "‚ùå Some tests failed!"
        echo "üîß Please check the logs and fix the issues."
        exit 1
